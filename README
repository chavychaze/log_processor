# Log Processing Docker Application

## Overview

A Docker-based solution for processing large log files with flexible filtering, PostgreSQL storage, and CSV export capabilities. Designed to handle files up to 1TB with memory-efficient processing.

## Prerequisites

- Docker and Docker Compose
- At least 2GB RAM
- Sufficient disk space for logs and database

## Project Structure

```
log-processor/
├── docker-compose.yml
├── Dockerfile
├── requirements.txt
├── entrypoint.sh
├── src/
│   ├── __init__.py
│   ├── log_reader.py
│   ├── db_writer.py
│   └── log_processor.py
└── tests/
    ├── __init__.py
    ├── conftest.py
    ├── test_log_reader.py
    └── test_db_writer.py
```

## Quick Start

1. Clone the repository
2. Place your log file in `./logs/` directory
3. Build and run:

```bash
docker-compose up --build
```

## Usage Examples

### Basic Filtering

```bash
docker-compose run log-processor \
    --file /logs/logfile.log \
    --type error \
    --start-date "2023-01-01" \
    --end-date "2023-12-31" \
    --keywords critical failure
```

### Save to PostgreSQL

```bash
docker-compose run log-processor \
    --file /logs/logfile.log \
    --db-write \
    --output /output/filtered.csv
```

## Configuration Options

### Filtering Arguments

- `--file`: Log file path (required)
- `--output`: Output CSV path (default: /output/filtered_logs.csv)
- `--type`: Filter by log type (e.g., error, warning)
- `--start-date`: Start date for filtering
- `--end-date`: End date for filtering
- `--keywords`: Space-separated keywords
- `--db-write`: Enable PostgreSQL storage

### Database Arguments

- `--pg-host`: PostgreSQL host (default: postgres)
- `--pg-port`: PostgreSQL port (default: 5432)
- `--pg-db`: Database name (default: logdb)
- `--pg-user`: Username (default: loguser)
- `--pg-password`: Password (default: logpassword)

## Supported Formats

### Date Formats

- `YYYY-MM-DD HH:MM:SS` (2023-12-01 14:30:45)
- `DD-MM-YYYY HH:MM:SS` (01-12-2023 14:30:45)
- `YYYY/MM/DD HH:MM:SS` (2023/12/01 14:30:45)
- `MM/DD/YYYY HH:MM:SS` (12/01/2023 14:30:45)
- `DD/MM/YYYY HH:MM:SS` (01/12/2023 14:30:45)
- Date-only variants of above formats

### Log Format

Logs should be in the following format:

```
timestamp | log_type | message
```

Examples:

```
2023-12-01 14:30:45 | error | Critical system failure
2023/12/01 | warning | System warning message
```

## Performance Optimization

- Generator-based processing for memory efficiency
- Chunked file reading (100MB chunks)
- Buffered I/O operations
- Optimized date parsing
- Memory-efficient DataFrame handling

## Troubleshooting

### Common Issues

1. Memory Issues

   - Increase Docker container memory limit
   - Reduce chunk size in configuration

2. Date Parsing Errors

   - Verify log dates match supported formats
   - Check for malformed dates in logs

3. Database Connection
   - Verify PostgreSQL container is running
   - Check connection parameters
   - Ensure database user has proper permissions

### Logs Analysis

- Check Docker logs: `docker-compose logs log-processor`
- PostgreSQL logs: `docker-compose logs postgres`
- Application logs in output directory

## Development

### Local Setup

```bash
# Install dependencies
pip install -r requirements.txt

# Run tests
python -m pytest tests/

# Format code
black src/

# Install dev-dependencies
export PYTHONPATH="./"
pip install -r requirements-dev.txt
pre-commit install
```

### Custom Modifications

- Add date formats in `src/log_reader.py`
- Modify chunk size in configuration
- Customize PostgreSQL schema

## License

MIT
